package es.fdi.iw;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import es.fdi.iw.model.Author;
import es.fdi.iw.model.Book;
import es.fdi.iw.model.BookUser;
import es.fdi.iw.model.Genre;
import es.fdi.iw.model.Person;
import es.fdi.iw.model.Publisher;
import es.fdi.iw.model.Request;
import es.fdi.iw.model.User;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {

	private static final Logger logger = LoggerFactory
			.getLogger(HomeController.class);

	@PersistenceContext
	private EntityManager entityManager;

	/**
	 * Intercepts login requests generated by the header; then continues to load
	 * normal page
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	@Transactional
	public String login(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formLogin = new String(request.getParameter("login").getBytes("ISO-8859-1"),"UTF-8");
		String formPass = new String(request.getParameter("pass").getBytes("ISO-8859-1"),"UTF-8");
		String formSource = request.getParameter("source");
		logger.info("Login attempt from '{}' while visiting '{}'", formLogin,
				formSource);

		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null
				|| formPass.length() < 4) {
			session.setAttribute("loginError",
					"usuarios y contraseñas: 4 caracteres mínimo");
		} else {
			User u = null;
			try {
				u = (User) entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin)
						.getSingleResult();
				if (u.isPassValid(formPass)) {
					logger.info("pass was valid");
					session.setAttribute("user", u);
					// sets the anti-csrf token
					getTokenForSession(session);
					session.removeAttribute("loginError");
				} else {
					logger.info("pass was NOT valid");
					session.setAttribute("loginError",
							"error en usuario o contraseña");
				}
			} catch (NoResultException nre) {
				session.setAttribute("loginError",
						"error en usuario o contraseña");
			}
		}

		// redirects to view from which login was requested
		return "redirect:" + formSource;
	}

	/**
	 * Logout (also returns to home view).
	 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) {
		logger.info("User '{}' logged out", session.getAttribute("user"));
		session.invalidate();
		return "redirect:/";
	}

	/**
	 * Uploads a photo for a user
	 * 
	 * @param id
	 *            of user
	 * @param photo
	 *            to upload
	 * @return
	 */
	@RequestMapping(value = "/user", method = RequestMethod.POST)
	public @ResponseBody String handleFileUpload(
			@RequestParam("photo") MultipartFile photo,
			@RequestParam("id") String id) {
		if (!photo.isEmpty()) {
			try {
				byte[] bytes = photo.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(ContextInitializer.getFile("user",
								id)));
				stream.write(bytes);
				stream.close();
				return "You successfully uploaded "
						+ id
						+ " into "
						+ ContextInitializer.getFile("user", id)
								.getAbsolutePath() + "!";
			} catch (Exception e) {
				return "You failed to upload " + id + " => " + e.getMessage();
			}
		} else {
			return "You failed to upload a photo for " + id
					+ " because the file was empty.";
		}
	}

	/**
	 * Displays user details
	 */
	@RequestMapping(value = "/user", method = RequestMethod.GET)
	public String user(HttpSession session, HttpServletRequest request, Model model) {
		return "user";
	}
	

	/**
	 * Displays book details
	 */
	@RequestMapping(value = "/book/{id}", method = RequestMethod.GET)
	public String book(@PathVariable("id") long id, Model model) {
		try {
			model.addAttribute(
					"book",
					entityManager.createNamedQuery("bookById")
							.setParameter("idParam", id).getSingleResult());
			@SuppressWarnings("unchecked")
			List<BookUser> bu = entityManager.createQuery(
					"select bu from BookUser bu").getResultList();
			System.err.println(bu.size());
			model.addAttribute("busers", bu);
		} catch (NoResultException nre) {
			logger.error("No such book: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "book";
	}

	/**
	 * Displays book details
	 */
	@RequestMapping(value = "/bookUser/{id}", method = RequestMethod.GET)
	public String bookUser(@PathVariable("id") long id, Model model) {
		try {
			model.addAttribute(
					"bu", entityManager.createNamedQuery("bookUserById")
							.setParameter("idParam", id).getSingleResult());

		} catch (NoResultException nre) {
			logger.error("No such bookUser: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "bookUser";
	}
	/**
	 * Load book authors for a given book via post; return as JSON
	 */
	@RequestMapping(value = "/bookAuthors")
	@ResponseBody
	@Transactional
	// needed to allow lazy init to work
	public ResponseEntity<String> bookAuthors(@RequestParam("id") long id,
			HttpServletRequest request) {
		try {
			Book book = (Book) entityManager.createNamedQuery("bookById")
					.setParameter("idParam", id).getSingleResult();
			List<Author> authors = book.getAuthors();
			StringBuilder sb = new StringBuilder("[");
			for (Author a : authors) {
				if (sb.length() > 1)
					sb.append(",");
				sb.append("{ " + "\"id\": \"" + a.getId() + "\", "
						+ "\"familyName\": \"" + a.getName() + "\",}");
			}
			return new ResponseEntity<String>(sb + "]", HttpStatus.OK);
		} catch (NoResultException nre) {
			logger.error("No such book: {}", id, nre);
		}
		return new ResponseEntity<String>("Error: libro no existe",
				HttpStatus.BAD_REQUEST);
	}

	/**
	 * Displays author details
	 */
	@RequestMapping(value = "/author/{id}", method = RequestMethod.GET)
	public String author(@PathVariable("id") long id, Model model) {
		try {
			model.addAttribute(
					"author",
					entityManager.createNamedQuery("authorById")
							.setParameter("idParam", id).getSingleResult());
		} catch (NoResultException nre) {
			logger.error("No such author: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "author";
	}

	/**
	 * Returns a users' photo
	 * 
	 * @param id
	 *            id of user to get photo from
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/user/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] userPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("user", id);
		InputStream in = null;
		if (f.exists()) {
			in = new BufferedInputStream(new FileInputStream(f));
		} else {
			in = new BufferedInputStream(this.getClass().getClassLoader()
					.getResourceAsStream("unknown-user.jpg"));
		}

		return IOUtils.toByteArray(in);
	}
	
	/**
	 * Uploads a photo for a book
	 * 
	 * @param id
	 *            of book
	 * @param photo
	 *            to upload
	 * @return
	 */
	@RequestMapping(value = "/book", method = RequestMethod.POST)
	public @ResponseBody String handleFileUploadBook(
			@RequestParam("photo") MultipartFile photo,
			@RequestParam("id") String id) {
		if (!photo.isEmpty()) {
			try {
				byte[] bytes = photo.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(
						new FileOutputStream(ContextInitializer.getFile("book",
								id)));
				stream.write(bytes);
				stream.close();
				
				return "You successfully uploaded "
						+ id
						+ " into "
						+ ContextInitializer.getFile("book", id)
								.getAbsolutePath() + "!";
			} catch (Exception e) {
				return "You failed to upload " + id + " => " + e.getMessage();
			}
		} else {
			return "You failed to upload a photo for " + id
					+ " because the file was empty.";
		}
	}
	
	/**
	 * Displays book details
	 */
	@RequestMapping(value = "/book", method = RequestMethod.GET)
	public String book(HttpSession session, HttpServletRequest request, Model model) {
		return "book";
	}

	/**
	 * Returns a books' photo
	 * 
	 * @param id
	 *            id of book to get photo from
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/book/photo", method = RequestMethod.GET, produces = MediaType.IMAGE_JPEG_VALUE)
	public byte[] bookPhoto(@RequestParam("id") String id) throws IOException {
		File f = ContextInitializer.getFile("book", id);
		InputStream in = null;
		if (f.exists()) {
			in = new BufferedInputStream(new FileInputStream(f));
		} else {
			in = new BufferedInputStream(this.getClass().getClassLoader()
					.getResourceAsStream("unknown-book.jpg"));
		}

		return IOUtils.toByteArray(in);
	}

	/**
	 * Toggles debug mode
	 */
	@RequestMapping(value = "/debug", method = RequestMethod.GET)
	public String debug(HttpSession session, HttpServletRequest request) {
		String formDebug = request.getParameter("debug");
		logger.info("Setting debug to {}", formDebug);
		session.setAttribute("debug", "true".equals(formDebug) ? "true"
				: "false");
		return "redirect:/";
	}

	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String empty(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		model.addAttribute("pageTitle", "BookChange");

		/* Géneros */
		@SuppressWarnings("unchecked")
		List<Genre> ge = entityManager.createQuery("select g from Genre g")
				.getResultList();
		System.err.println(ge.size());
		model.addAttribute("genres", ge);
		model.addAttribute("genresJSON", jsoniza(ge));
		/* Libros */
		@SuppressWarnings("unchecked")
		List<Book> bk = entityManager.createQuery("select b from Book b")
				.getResultList();
		System.err.println(bk.size());
		model.addAttribute("books", bk);
		/* Editoriales */
		@SuppressWarnings("unchecked")
		List<Publisher> pb = entityManager.createQuery(
				"select p from Publisher p").getResultList();
		System.err.println(pb.size());
		model.addAttribute("publishers", pb);
		/* Autores */
		@SuppressWarnings("unchecked")
		List<Author> au = entityManager.createQuery("select a from Author a")
				.getResultList();
		System.err.println(au.size());
		model.addAttribute("authors", au);

		return "index";
	}

	@RequestMapping(value = "/index", method = RequestMethod.GET)
	public String admin(Locale locale, Model model) {
		return empty(locale,model);
	}

	@RequestMapping(value = "/index/{id}", method = RequestMethod.GET)
	public String pagination(@PathVariable("id") long id, Model model, Locale locale) {
		model.addAttribute("pagination",id);
		model.addAttribute("prefix", "../");
		return empty(locale,model);
	}

	@RequestMapping(value = "/admin", method = RequestMethod.GET)
	public String admin(Locale locale, Model model, HttpSession session) {
		logger.info("Welcome home! The client locale is {}.", locale);

		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
				DateFormat.LONG, locale);

		String formattedDate = dateFormat.format(date);

		model.addAttribute("serverTime", formattedDate);
		if (isAdmin(session))
			return "admin";
		else
			return ""; //dará un error
	}

	@RequestMapping(value = "/libros", method = RequestMethod.GET)
	public String productos(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		/* Libros */
		@SuppressWarnings("unchecked")
		List<Book> bk = entityManager.createQuery("select b from Book b")
				.getResultList();
		System.err.println(bk.size());
		model.addAttribute("books", bk);
		model.addAttribute("pageTitle", "Listado de libros");

		return "libros";
	}
	
	@RequestMapping(value = "/libros/{id}", method = RequestMethod.GET)
	public String pagination_libros(@PathVariable("id") long id, Model model, Locale locale) {
		model.addAttribute("pagination",id);
		model.addAttribute("prefix", "../");
		return productos(locale,model);
	}
	
	/**
	 * Displays genre details
	 */
	@RequestMapping(value = "/categorias/{id}", method = RequestMethod.GET)
	public String categorias(@PathVariable("id") long id, Model model, Locale locale) {
		model.addAttribute("pageTitle", "Categorías");
		/* Libros */
		@SuppressWarnings("unchecked")
		List<Book> bk = entityManager.createQuery("select b from Book b")
				.getResultList();
		System.err.println(bk.size());
		model.addAttribute("books", bk);
		try {
			model.addAttribute("genre", entityManager.createNamedQuery("genreById")
							.setParameter("idParam", id).getSingleResult());
		} catch (NoResultException nre) {
			logger.error("No such genre: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "categorias";
	}
	
	/**
	 * Displays book details
	 */
	@RequestMapping(value = "/ejemplar/{id}", method = RequestMethod.GET)
	public String ejemplar(@PathVariable("id") long id, Model model, Locale locale) {
		model.addAttribute("pageTitle", "Ejemplar");
		/* Usuarios */
		@SuppressWarnings("unchecked")
		List<User> us = entityManager.createQuery("select u from User u")
				.getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		/* Editoriales */
		@SuppressWarnings("unchecked")
		List<Publisher> pb = entityManager.createQuery(
				"select p from Publisher p").getResultList();
		System.err.println(pb.size());
		model.addAttribute("publishers", pb);
		/* Autores */
		@SuppressWarnings("unchecked")
		List<Author> au = entityManager.createQuery("select a from Author a")
				.getResultList();
		System.err.println(au.size());
		model.addAttribute("authors", au);
		/* Libros-Usuarios */
		@SuppressWarnings("unchecked")
		List<BookUser> bu = entityManager.createQuery(
				"select bu from BookUser bu").getResultList();
		System.err.println(bu.size());
		model.addAttribute("busers", bu);
		/* Géneros */
		@SuppressWarnings("unchecked")
		List<Genre> ge = entityManager.createQuery("select g from Genre g")
				.getResultList();
		System.err.println(ge.size());
		model.addAttribute("genres", ge);
		model.addAttribute("genresJSON", jsoniza(ge));
		/* Datos_ususarios */
		@SuppressWarnings("unchecked")
		List<Person> pe = entityManager.createQuery("select pe from Person pe")
				.getResultList();
		System.err.println(pe.size());
		model.addAttribute("persons", pe);
		/* Peticiones */
		@SuppressWarnings("unchecked")
		List<Request> rq = entityManager.createQuery("select r from Request r")
				.getResultList();
		System.err.println(rq.size());
		model.addAttribute("requests", rq);
		try {
			model.addAttribute(
					"book",
					entityManager.createNamedQuery("bookById")
							.setParameter("idParam", id).getSingleResult());
		} catch (NoResultException nre) {
			logger.error("No such book: {}", id, nre);
		}
		model.addAttribute("prefix", "../");
		return "ejemplar";
	}

	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String register(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);

		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
				DateFormat.LONG, locale);

		String formattedDate = dateFormat.format(date);

		model.addAttribute("serverTime", formattedDate);

		return "register";
	}

	@RequestMapping(value = "/newLib", method = RequestMethod.GET)
	public String newLib(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);

		@SuppressWarnings("unchecked")
		List<Genre> ge = entityManager.createQuery("select g from Genre g")
				.getResultList();
		System.err.println(ge.size());
		model.addAttribute("genres", ge);
		model.addAttribute("genresJSON", jsoniza(ge));

		return "newLib";
	}

	@RequestMapping(value = "/faq", method = RequestMethod.GET)
	public String faq(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);

		Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG,
				DateFormat.LONG, locale);

		String formattedDate = dateFormat.format(date);

		model.addAttribute("serverTime", formattedDate);

		return "faq";
	}
	
	
	@RequestMapping(value = "/biblioteca", method = RequestMethod.GET)
	@Transactional
	public String biblioteca(Locale locale, Model model) {
		/* Libros-Usuarios */
		@SuppressWarnings("unchecked")
		List<BookUser> bu = entityManager.createQuery(
				"select bu from BookUser bu").getResultList();
		System.err.println(bu.size());
		model.addAttribute("busers", bu);
		model.addAttribute("pageTitle", "Biblioteca");
		return "biblioteca";
	}
	
	@RequestMapping(value = "/peticiones", method = RequestMethod.GET)
	@Transactional
	public String peticiones(Locale locale, Model model) {	
		/* Peticiones */
		@SuppressWarnings("unchecked")
		List<Request> rq = entityManager.createQuery("select r from Request r")
				.getResultList();
		System.err.println(rq.size());
		model.addAttribute("requests", rq);
		model.addAttribute("pageTitle", "Peticiones");
		return "peticiones";
	}
	
	/*--(INICIO)-----------------(Pag. de eliminación acceso admin)------------------------------------*/
	@RequestMapping(value = "/del_personas", method = RequestMethod.GET)
	@Transactional
	public String del_Personas(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Personas");
		/* Datos_ususarios */
		@SuppressWarnings("unchecked")
		List<Person> pe = entityManager.createQuery("select pe from Person pe")
				.getResultList();
		System.err.println(pe.size());
		model.addAttribute("persons", pe);
		if (isAdmin(session))
			return "del_personas";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_peticiones", method = RequestMethod.GET)
	@Transactional
	public String del_peticiones(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Peticiones");
		/* Peticiones */
		@SuppressWarnings("unchecked")
		List<Request> rq = entityManager.createQuery("select r from Request r")
				.getResultList();
		System.err.println(rq.size());
		model.addAttribute("requests", rq);
		if (isAdmin(session))
			return "del_peticiones";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_generos", method = RequestMethod.GET)
	@Transactional
	public String del_generos(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Generos");
		/* Géneros */
		@SuppressWarnings("unchecked")
		List<Genre> ge = entityManager.createQuery("select g from Genre g")
				.getResultList();
		System.err.println(ge.size());
		model.addAttribute("genres", ge);
		if (isAdmin(session))
			return "del_generos";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_libros_usuarios", method = RequestMethod.GET)
	@Transactional
	public String del_libros_usuarios(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Libros_Usuarios");
		/* Libros-Usuarios */
		@SuppressWarnings("unchecked")
		List<BookUser> bu = entityManager.createQuery(
				"select bu from BookUser bu").getResultList();
		System.err.println(bu.size());
		model.addAttribute("busers", bu);
		if (isAdmin(session))
			return "del_libros_usuarios";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_autores", method = RequestMethod.GET)
	@Transactional
	public String del_autores(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Autores");
		/* Autores */
		@SuppressWarnings("unchecked")
		List<Author> au = entityManager.createQuery("select a from Author a")
				.getResultList();
		System.err.println(au.size());
		model.addAttribute("authors", au);
		if (isAdmin(session))
			return "del_autores";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_editoriales", method = RequestMethod.GET)
	@Transactional
	public String del_editoriales(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Editoriales");
		/* Editoriales */
		@SuppressWarnings("unchecked")
		List<Publisher> pb = entityManager.createQuery(
				"select p from Publisher p").getResultList();
		System.err.println(pb.size());
		model.addAttribute("publishers", pb);
		if (isAdmin(session))
			return "del_editoriales";
		else
			return ""; //dará un error
	}
	
	@RequestMapping(value = "/del_usuarios", method = RequestMethod.GET)
	@Transactional
	public String del_usuarios(Locale locale, Model model, HttpSession session) {		
		model.addAttribute("pageTitle", "del_Usuarios");
		/* Usuarios */
		@SuppressWarnings("unchecked")
		List<User> us = entityManager.createQuery("select u from User u")
				.getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		if (isAdmin(session))
			return "del_usuarios";
		else
			return ""; //dará un error
	}
	/*--(FIN)-----------------(Pag. de eliminación acceso admin)------------------------------------*/

	/**
	 * Checks the anti-csrf token for a session against a value
	 * 
	 * @param session
	 * @param token
	 * @return the token
	 */
	static boolean isTokenValid(HttpSession session, String token) {
		Object t = session.getAttribute("csrf_token");
		return (t != null) && t.equals(token);
	}

	/**
	 * Returns an anti-csrf token for a session, and stores it in the session
	 * 
	 * @param session
	 * @return
	 */
	static String getTokenForSession(HttpSession session) {
		String token = UUID.randomUUID().toString();
		session.setAttribute("csrf_token", token);
		return token;
	}

	/**
	 * Returns true if the user is logged in and is an admin
	 */
	static boolean isAdmin(HttpSession session) {
		User u = (User) session.getAttribute("user");
		if (u != null) {
			return u.getRole().equals("admin");
		} else {
			return false;
		}
	}

	/**
	 * A not-very-dynamic view that shows an "Prueba us".
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/prueba", method = RequestMethod.GET)
	@Transactional
	public String prueba(Locale locale, Model model, HttpSession session) {

		logger.info("User is looking up 'about us'");
		/* Usuarios */
		List<User> us = entityManager.createQuery("select u from User u")
				.getResultList();
		System.err.println(us.size());
		model.addAttribute("users", us);
		/* Libros */
		List<Book> bk = entityManager.createQuery("select b from Book b")
				.getResultList();
		System.err.println(bk.size());
		model.addAttribute("books", bk);
		/* Editoriales */
		List<Publisher> pb = entityManager.createQuery(
				"select p from Publisher p").getResultList();
		System.err.println(pb.size());
		model.addAttribute("publishers", pb);
		/* Autores */
		List<Author> au = entityManager.createQuery("select a from Author a")
				.getResultList();
		System.err.println(au.size());
		model.addAttribute("authors", au);
		/* Libros-Usuarios */
		List<BookUser> bu = entityManager.createQuery(
				"select bu from BookUser bu").getResultList();
		System.err.println(bu.size());
		model.addAttribute("busers", bu);
		/* Géneros */
		List<Genre> ge = entityManager.createQuery("select g from Genre g")
				.getResultList();
		System.err.println(ge.size());
		model.addAttribute("genres", ge);
		model.addAttribute("genresJSON", jsoniza(ge));
		/* Datos_ususarios */
		List<Person> pe = entityManager.createQuery("select pe from Person pe")
				.getResultList();
		System.err.println(pe.size());
		model.addAttribute("persons", pe);
		/* Peticiones */
		List<Request> rq = entityManager.createQuery("select r from Request r")
				.getResultList();
		System.err.println(rq.size());
		model.addAttribute("requests", rq);
		
		model.addAttribute("pageTitle", "IW: PRUEBA");
		if (isAdmin(session))
			return "PRUEBA_BUSQUEDA";
		else
			return ""; //dará un error
	}

	public String jsoniza(List<Genre> ges) {
		StringBuilder sb = new StringBuilder("[");
		boolean first = true;
		for (Genre g : ges) {
			sb.append((first ? "\"" : ",\"") + g.getGenre() + "\"");
			first = false;
		}
		return sb.append("]").toString();
	}

	/*-------------------------Registros--------------------------------------------------*/

	User queryUser(String formLogin) {
		User u = (User) entityManager.createNamedQuery("userByLogin")
				.setParameter("loginParam", formLogin).getSingleResult();
		return u;
	}

	boolean queryBook(String formIsbn) {
		try {
			Book b = (Book) entityManager.createNamedQuery("bookByIsbn")
					.setParameter("isbnParam", formIsbn).getSingleResult();
			return true;
		} catch (NoResultException nre2) {
			return false;
		}
	}

	void queryAuthor(String formAuthorNombre, Book b) {
		try {
			Author a = (Author) entityManager.createNamedQuery("authorByName")
					.setParameter("nameParam", formAuthorNombre)
					.getSingleResult();
		
			a.getEscritos().add(b);
			entityManager.persist(a);
		} catch (NoResultException nre2) {
			List<Book> l = new ArrayList<Book>();
			l.add(b);
			Author a = Author.createAuthor(formAuthorNombre, l);

			entityManager.persist(a);
		}
	}

	void queryGenre(String formGenre, Book b) {
		Genre g = (Genre) entityManager.createNamedQuery("genreByGenre")
				.setParameter("genreParam", formGenre).getSingleResult();
		g.getGeneros().add(b);
	}

	Publisher queryPublisher(String formPublisher) {
		try {
			Publisher p = (Publisher) entityManager
					.createNamedQuery("PublisherByName")
					.setParameter("NameParam", formPublisher).getSingleResult();
			return p;
		} catch (NoResultException nre2) {
			Publisher p = Publisher.createPublisher(formPublisher);
			entityManager.persist(p);
			return p;
		}
	}

	/*----------------------Nuevos datos--------------------------------*/
	
	@RequestMapping(value = "/newUser", method = RequestMethod.POST)
	@Transactional
	public String newUser(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formLogin = new String(request.getParameter("login").getBytes("ISO-8859-1"),"UTF-8");
		String formPass = new String(request.getParameter("pass").getBytes("ISO-8859-1"),"UTF-8");
		String formName = new String(request.getParameter("name").getBytes("ISO-8859-1"),"UTF-8");
		String formSurname1 = new String(request.getParameter("surname1").getBytes("ISO-8859-1"),"UTF-8");
		String formSurname2 = new String(request.getParameter("surname2").getBytes("ISO-8859-1"),"UTF-8");
		String formEmail = request.getParameter("email");
		String formSource = request.getParameter("source");

		// validate request
		if (formLogin == null || formLogin.length() < 4 || formPass == null
				|| formPass.length() < 4) {
			session.setAttribute("registerError",
					"usuarios y password: 4 caracteres minimo");
			return "redirect:" + formSource;
		} else {
			try {
				User u = queryUser(formLogin);
				// logger.info("pass was NOT valid");
				session.setAttribute("registerError", "usuario existe");
				return "redirect:" + formSource;
			} catch (NoResultException nre) {
				// logger.info("no-such-user; creating user {}", formLogin);
				User user = User.createUser(formLogin, formPass, "user");
				Person person = Person.createPerson(formName, formSurname1,
						formSurname2, formEmail, user);
				entityManager.persist(user);
				entityManager.persist(person);
				session.removeAttribute("registerError");
				session.setAttribute("user", user);
				// sets the anti-csrf token
				getTokenForSession(session);
			}
		}
		return "redirect:index";
	}

	@RequestMapping(value = "/newBook", method = RequestMethod.POST)
	@Transactional
	public String newBook(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formPublisher = new String(request.getParameter("publisher").getBytes("ISO-8859-1"),"UTF-8");
		String formIsbn = request.getParameter("isbn");
		String formSource = request.getParameter("source");
		String formTitle = new String(request.getParameter("title").getBytes("ISO-8859-1"),"UTF-8");
		String formAuthorNombre = new String(request.getParameter("authorN").getBytes("ISO-8859-1"),"UTF-8");
		// String formAuthorApellido1 = request.getParameter("authorA1");
		// String formAuthorApellido2 = request.getParameter("authorA2");
		String formYear = request.getParameter("year");
		String formGenre = new String(request.getParameter("genre").getBytes("ISO-8859-1"),"UTF-8");
		String formLogin = new String(request.getParameter("user1").getBytes("ISO-8859-1"),"UTF-8");
		String formState = new String(request.getParameter("estado").getBytes("ISO-8859-1"),"UTF-8");
		String formComment = new String(request.getParameter("comentario").getBytes("ISO-8859-1"),"UTF-8");
		// validate request
		if (formPublisher == null || formPublisher.length() < 1
				|| formIsbn == null || formIsbn.length() < 8) {
			session.setAttribute("BookError", "Faltan Datos");
		} else {
			boolean book = queryBook(formIsbn);
			if (book)
				session.setAttribute("BookError",
						"Existe ISBN, insertar en usuario");
			else {
				Publisher p = queryPublisher(formPublisher);
				Book b = Book.createBook(" ", " ", formIsbn, formTitle,
						formYear, p);
				User u = (User) entityManager.createNamedQuery("userByLogin")
						.setParameter("loginParam", formLogin)
						.getSingleResult();
				entityManager.persist(b);
				session.setAttribute("BookError", b.getIsbn());
				queryAuthor(formAuthorNombre, b);
				BookUser bu = BookUser.createBookUser(u, b, formState,
						formComment);
				entityManager.persist(bu);
				queryGenre(formGenre, b);
				session.setAttribute("book", b);
				session.removeAttribute("BookError");
			}
		}
		return "redirect:book";
	}

	@SuppressWarnings("unused")
	@RequestMapping(value = "/newRequest", method = RequestMethod.POST)
	@Transactional
	public String newRequest(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formUserIn = new String(request.getParameter("userI").getBytes("ISO-8859-1"),"UTF-8");
		String formUserOut = new String(request.getParameter("userO").getBytes("ISO-8859-1"),"UTF-8");
		String formTitle = new String(request.getParameter("title").getBytes("ISO-8859-1"),"UTF-8");
//		String formEstado = request.getParameter("state");
		String formSource = request.getParameter("source");
		// validate request
//		if (formUserIn == null || formEstado.length() < 4 || formEstado == null) {
		if (formUserIn == null ){
			session.setAttribute("requestError", "Algo ha salido mal");
		} else {
			User ui = (User) entityManager.createNamedQuery("userByLogin")
					.setParameter("loginParam", formUserIn).getSingleResult();
			Book b = (Book) entityManager.createNamedQuery("bookByTitle")
					.setParameter("titleParam", formTitle).getSingleResult();
			BookUser bu = (BookUser) entityManager
					.createNamedQuery("bookUserByBook")
					.setParameter("bookParam", b).getSingleResult();
			User uo = (User) entityManager.createNamedQuery("userByLogin")
					.setParameter("loginParam", formUserOut).getSingleResult();
			Request r = Request.createRequest(ui, uo, bu);
			entityManager.persist(r);
		}
		return "redirect:" + formSource;
	}

	/*----------------------Eliminación de datos--------------------------------*/
	
	/**
	 * Delete a user; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delUser", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> bookAuthors(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {

		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such user or bad auth", HttpStatus.FORBIDDEN);
		} else {
			if (entityManager.createNamedQuery("delrequestUin")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en request los userIn
			}
			if (entityManager.createNamedQuery("delrequestUout")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en request los userOut
			}
			if (entityManager.createNamedQuery("delBUU")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en bookUser
			}
			if (entityManager.createNamedQuery("delPersonU")
					.setParameter("idParam", id).executeUpdate() == 1) {
				;// elimina en person
			}
			if (entityManager.createNamedQuery("delUser")
					.setParameter("idParam", id).executeUpdate() == 1) {
				return new ResponseEntity<String>(
						"Ok: user " + id + " removed", HttpStatus.OK);
			} else {
				return new ResponseEntity<String>("Error: no such user",
						HttpStatus.BAD_REQUEST);
			}
		}
	}

	/**
	 * Delete a Request; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delRequest", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> delRequest(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such request or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delRequest")
				.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: request " + id + " removed",
					HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("Error: no such request",
					HttpStatus.BAD_REQUEST);
		}
	}

	/**
	 * Delete a Request; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delBookUser", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> delBookUser(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such bookUser or bad auth", HttpStatus.FORBIDDEN);
		} else {
			if (entityManager.createNamedQuery("delRequestBU")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en request
			}
			if (entityManager.createNamedQuery("delBookUser")
					.setParameter("idParam", id).executeUpdate() == 1) {
				return new ResponseEntity<String>("Ok: bookUser " + id
						+ " removed", HttpStatus.OK);
			} else {
				return new ResponseEntity<String>("Error: no such bookUser",
						HttpStatus.BAD_REQUEST);
			}
		}
	}

	/**
	 * Delete a Person; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delPerson", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	// Sólo elimina el person
	public ResponseEntity<String> delPerson(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such Person or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delPerson")
				.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: Person " + id + " removed",
					HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("Error: no such Person",
					HttpStatus.BAD_REQUEST);
		}
	}

	/**
	 * Delete a book; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delBook", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> books(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such user or bad auth", HttpStatus.FORBIDDEN);
		} else{
			if (entityManager.createNamedQuery("delrequestB")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en request
			}
			if (entityManager.createNamedQuery("delBuB")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en bookUser
			}
			if (entityManager.createNamedQuery("delBook")
					.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: book " + id + " removed",
				HttpStatus.OK);
			} else {
				return new ResponseEntity<String>("Error: no such user",
					HttpStatus.BAD_REQUEST);
			}
		}
	}

	/**
	 * Delete a Request; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delPublisher", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	// Al eliminar la Editorial se eliminan todos sus libros
	public ResponseEntity<String> delPublisher(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such publisher or bad auth",
					HttpStatus.FORBIDDEN);
		} else {

			if (entityManager.createNamedQuery("delrequestPu")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en request
			}
			if (entityManager.createNamedQuery("delBuPu")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en bookUser
			}
			delBookUser(id, token, session);
			if (entityManager.createNamedQuery("delBookPu")
					.setParameter("idParam", id).executeUpdate() >= 1) {
				;// elimina en book
			}
			if (entityManager.createNamedQuery("delPublisher")
					.setParameter("idParam", id).executeUpdate() == 1) {
				return new ResponseEntity<String>("Ok: publisher " + id
						+ " removed", HttpStatus.OK);
			} else {
				return new ResponseEntity<String>("Error: no such publisher",
						HttpStatus.BAD_REQUEST);
			}
		}
	}

	/**
	 * Delete a Genre; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delGenre", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> delGenre(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such Genre or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delGenre")
				.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: Genre " + id + " removed",
					HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("Error: no such Genre",
					HttpStatus.BAD_REQUEST);
		}
	}
	
	/**
	 * Delete a Author; return JSON indicating success or failure
	 */
	@RequestMapping(value = "/delAuthor", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> delAuthor(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such Author or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delAuthor")
				.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: Author " + id + " removed",
					HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("Error: no such Author",
					HttpStatus.BAD_REQUEST);
		}
	}
	
	/**
	 * Delete a Genre_Book; return JSON indicating success or failure
	 *
	@RequestMapping(value = "/delGenreB", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> delGenreB(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		if (!isAdmin(session) || !isTokenValid(session, token)) {
			return new ResponseEntity<String>(
					"Error: no such Genre_Book or bad auth", HttpStatus.FORBIDDEN);
		} else if (entityManager.createNamedQuery("delGenreB")
				.setParameter("idParam", id).executeUpdate() == 1) {
			return new ResponseEntity<String>("Ok: Genre_Book " + id + " removed",
					HttpStatus.OK);
		} else {
			return new ResponseEntity<String>("Error: no such Genre_Book",
					HttpStatus.BAD_REQUEST);
		}
		return null;
	}*/
	
	/*----------------------Modificar datos--------------------------------*/
	/**
	 * Update a request
	 */
	@RequestMapping(value = "/acceptRequest", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> acceptRequest(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		Request r = (Request) entityManager.createNamedQuery("requestById")
				.setParameter("idParam", id).getSingleResult();
		r = Request.acceptRequest(r);
		entityManager.persist(r);
		return new ResponseEntity<String>("Ok: request " + id + " modified",
					HttpStatus.OK);
	}
	/**
	 * Update a request
	 */
	@RequestMapping(value = "/cancelRequest", method = RequestMethod.POST)
	@ResponseBody
	@Transactional
	// needed to allow DB change
	public ResponseEntity<String> cancelRequest(@RequestParam("id") long id,
			@RequestParam("csrf") String token, HttpSession session) {
		Request r = (Request) entityManager.createNamedQuery("requestById")
				.setParameter("idParam", id).getSingleResult();
		r = Request.cancelRequest(r);
		entityManager.persist(r);
		return new ResponseEntity<String>("Ok: request " + id + " modified",
					HttpStatus.OK);
	}
	@RequestMapping(value = "/modUser", method = RequestMethod.POST)
	@Transactional
	public String modUser(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formOldLogin = new String(request.getParameter("Oldlogin").getBytes("ISO-8859-1"),"UTF-8");
		String formLogin = new String(request.getParameter("login").getBytes("ISO-8859-1"),"UTF-8");
		String formPass = new String(request.getParameter("pass").getBytes("ISO-8859-1"),"UTF-8");
		String formName = new String(request.getParameter("name").getBytes("ISO-8859-1"),"UTF-8");
		String formSurname1 = new String(request.getParameter("surname1").getBytes("ISO-8859-1"),"UTF-8");
		String formSurname2 = new String(request.getParameter("surname2").getBytes("ISO-8859-1"),"UTF-8");
		String formEmail = request.getParameter("email");
		String formId = request.getParameter("e");
		String formSource = request.getParameter("source");
        User u = queryUser(formOldLogin);
     	Person p = (Person) entityManager.createNamedQuery("PersonByUser")
 			   .setParameter("userParam", u).getSingleResult();
		u = User.modUser(u, formLogin, formPass);
		p = Person.modPerson(p, formName, formSurname1, formSurname2, formEmail, u);
		session.removeAttribute("user");
		session.setAttribute("user", u);
		entityManager.persist(u);
		entityManager.persist(p);
		return "redirect:" + formSource;
	}

	@RequestMapping(value = "/modBook", method = RequestMethod.POST)
	@Transactional
	public String modBook(HttpServletRequest request, Model model,
			HttpSession session) throws UnsupportedEncodingException {
		String formPublisher = new String(request.getParameter("publisher").getBytes("ISO-8859-1"),"UTF-8");
		String formIsbn = request.getParameter("isbn");
		String formOldIsbn = request.getParameter("Oldisbn");
		String formSource = request.getParameter("source");
		String formTitle = new String(request.getParameter("title").getBytes("ISO-8859-1"),"UTF-8");
		String formAuthorNombre = new String(request.getParameter("authorN").getBytes("ISO-8859-1"),"UTF-8");
		String formYear = request.getParameter("year");
		String formGenre = new String(request.getParameter("genre").getBytes("ISO-8859-1"),"UTF-8");
		String formState = request.getParameter("estado");
		String formComment = request.getParameter("comentario");
		Book b = (Book) entityManager.createNamedQuery("bookByIsbn")
				.setParameter("isbnParam", formOldIsbn).getSingleResult();
		Publisher p = queryPublisher(formPublisher);
		b = Book.modBook(b, formIsbn, formTitle, formYear, p);
		entityManager.persist(b);
		if(formAuthorNombre.length() > 4)
			queryAuthor(formAuthorNombre, b);
		BookUser bu  = (BookUser) entityManager.createNamedQuery("bookUserByBook")
					.setParameter("bookParam", b)
					.getSingleResult();
		bu = BookUser.modBookUser(bu, b, formState,
					formComment);
		entityManager.persist(bu);
		if(formGenre.length() > 3)
			queryGenre(formGenre, b);
		return "redirect:" + formSource;
	}
}
